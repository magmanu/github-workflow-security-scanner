from security_settings import secrets_pattern, dangerous_events
import re

def is_trigger_dangerous(trigger_name: str) -> bool:
    return trigger_name in dangerous_events


def get_dangerous_triggers(triggers: list) -> list:
    dangeours_triggers = []
    for trigger in triggers:
        if is_trigger_dangerous(trigger):
            dangeours_triggers.append(trigger)
    return dangeours_triggers


def list_secrets_used(full_yaml: str) -> list:
    """
    Finds all secrets being used in this workflow.
    Useful in case there's an RCE, we can pull these secrets
    :param full_yaml: The full yaml string of the workflow.
    :return: A list of all secrets being used in this workflow."""
    found_matches = []
    secrets = re.compile(secrets_pattern)
    if matches:= secrets.findall(full_yaml):
        for match in matches:
            if match not in found_matches:
                found_matches.append(match)
    return found_matches